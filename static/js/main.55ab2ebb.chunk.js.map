{"version":3,"sources":["assets/icons/linkedin-logo.svg","assets/icons/message.svg","assets/icons/network.svg","components/Header/index.jsx","containers/HomePage/index.jsx","components/Button/index.jsx","containers/LoginPage/index.jsx","containers/MyNetworkPage/index.helper.js","containers/MyNetworkPage/index.jsx","containers/MessagingPage/index.jsx","App.js","serviceWorker.js","index.js"],"names":["module","exports","Header","className","to","src","Logo","alt","NetworkIcon","MessageIcon","HomePage","Button","onClick","label","type","LoginPage","history","useState","name","setName","email","setEmail","desp","setDesp","handleChange","e","target","value","onSubmit","preventDefault","randomNum","Math","ceil","random","userData","id","role","photoUrl","localStorage","setItem","JSON","stringify","push","onChange","placeholder","required","dummyUsers","info","welcomeMessage","MyNetwork","currentUser","setCurrentUser","chatboxContainerRef","createRef","useEffect","currentTalkjsUser","getItem","parse","description","map","user","key","userId","find","Talk","ready","then","me","User","other","window","talkSession","Session","appId","process","conversationId","oneOnOneId","conversation","getOrCreateConversation","setParticipant","createChatbox","mount","current","catch","console","error","handleClick","ref","style","height","Messaging","inboxRef","createInbox","App","basename","exact","path","component","MyNetworkPage","MessagingPage","Boolean","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","registration","unregister","message"],"mappings":"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","file":"static/js/main.55ab2ebb.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/linkedin-logo.eef55fd4.svg\";","module.exports = __webpack_public_path__ + \"static/media/message.5cb81ce3.svg\";","module.exports = __webpack_public_path__ + \"static/media/network.80b510e5.svg\";","import React from 'react'\nimport { Link } from 'react-router-dom'\nimport Logo from '../../assets/icons/linkedin-logo.svg'\nimport MessageIcon from '../../assets/icons/message.svg'\nimport NetworkIcon from '../../assets/icons/network.svg'\n\nimport './style.scss'\n\nconst Header = () => {\n  return (\n    <nav className=\"header\">\n      <ul className=\"header__list\">\n        <div>\n          <Link to=\"/\" className=\"header__link\">\n            <img className=\"header__logo\" src={Logo} alt=\"logo\"/>\n          </Link>\n        </div>\n        <div className=\"header__menu\">\n          <Link to=\"/my-network\" className=\"header__link\">\n            <img src={NetworkIcon} alt=\"\"/>\n            My Networks\n          </Link>\n          <Link to=\"/messaging\" className=\"header__link\">\n            <img src={MessageIcon} alt=\"\"/>\n            Messaging Page\n          </Link>\n        </div>\n      </ul>\n    </nav>\n  )\n}\n\nexport default Header\n","import React from 'react'\nimport Header from '../../components/Header'\n\nconst HomePage = () => {\n  return (\n    <div>\n      <Header />\n    </div>\n  );\n}\n\nexport default HomePage","import React from 'react'\nimport PropTypes from 'prop-types'\nimport './style.scss'\n\nconst Button = ({ onClick, label }) => {\n  return (\n    <>\n      <button type=\"submit\" onClick={onClick} className=\"button\">\n        {label}\n      </button>\n    </>\n  )\n}\n\nButton.propTypes = {\n  onClick: PropTypes.func,\n  label: PropTypes.string.isRequired,\n}\nexport default Button\n","import React, { useState } from \"react\"\nimport Button from '../../components/Button'\nimport './style.scss'\n\nconst LoginPage = ({ history }) => {\n  const [name, setName] = useState('')\n  const [email, setEmail] = useState('')\n  const [desp, setDesp] = useState('')\n\n  const handleChange = (e) => {\n    const { name, value } = e.target\n    switch (name) {\n      case 'name':\n        setName(value)\n        break\n      case 'email':\n        setEmail(value)\n        break\n      case 'desp':\n        setDesp(value)\n        break\n      default:\n        break\n    }\n  }\n\n  const handleSubmit = e => {\n    e.preventDefault()\n    const randomNum = Math.ceil(Math.random() * 9999);\n    const userData = {\n      name,\n      email,\n      desp,\n      id: randomNum,\n      role: \"Member\",\n      photoUrl: \"https://images.unsplash.com/photo-1514543250559-83867827ecce?ixlib=rb-1.2.1&ixid=eyJhcHBfaWQiOjEyMDd9&auto=format&fit=crop&w=711&q=80\"\n    }\n\n    localStorage.setItem(\"currentTalkjsUser\", JSON.stringify(userData))\n    history.push(\"/my-network\");\n  }\n    return (\n      <div className=\"login-container\">\n        <div className=\"login-form\">\n          <form onSubmit={handleSubmit}>\n            <input type=\"text\"\n              name=\"name\"\n              onChange={handleChange}\n              placeholder=\"Name\"\n              className=\"input\"\n              required\n            />\n            <input\n              type=\"email\"\n              name=\"email\"\n              onChange={handleChange}\n              placeholder=\"Email\"\n              className=\"input\"\n              required\n            />\n            <textarea type=\"text\"\n              name=\"desp\"\n              onChange={handleChange}\n              placeholder=\"Short Description\"\n              className=\"input textarea\">\n            </textarea>\n            <Button label=\"Submit\"/>\n          </form>\n        </div>\n      </div>\n    )\n}\nexport default LoginPage","export const dummyUsers = [\n  {\n    id: \"1\",\n    name: \"Kelvin Samson\",\n    email: \"kelvin@sample.com\",\n    photoUrl: \"https://randomuser.me/api/portraits/men/32.jpg\",\n    role: \"Member\",\n    info: \"Front end developer at Google\",\n    welcomeMessage: \"Hey there! what's up ? :-)\"\n  },\n  {\n    id: \"3\",\n    name: \"Annabel Stone\",\n    email: \"annie@sample.com\",\n    photoUrl: \"https://randomuser.me/api/portraits/women/65.jpg\",\n    role: \"Member\",\n    info: \"Backend developer at Amazon\",\n    welcomeMessage: \"Hey there! Love to chat :-)\"\n  },\n  {\n    id: \"4\",\n    name: \"Grace Loveday\",\n    email: \"grace@sample.com\",\n    photoUrl: \"https://randomuser.me/api/portraits/women/44.jpg\",\n    role: \"Member\",\n    info: \"Product Designer at Google\",\n    welcomeMessage: \"Hey there! How can i help you :-)\"\n  },\n  {\n    id: \"5\",\n    name: \"Angela Jobs\",\n    email: \"angela@sample.com\",\n    photoUrl: \"https://pbs.twimg.com/profile_images/834493671785525249/XdLjsJX_.jpg\",\n    role: \"Member\",\n    info: \"Software Engineer at TalkJS\",\n    welcomeMessage: \"Hey there! Happy weekend :-)\"\n  },\n]","import React, { useState, useEffect, createRef } from 'react'\nimport Talk from \"talkjs\"\nimport { dummyUsers } from \"./index.helper\"\nimport Header from '../../components/Header'\nimport './style.scss'\n\nconst MyNetwork = () => {\n  const [currentUser, setCurrentUser] = useState({})\n  const chatboxContainerRef = createRef()\n\n  useEffect(() => {\n    const currentTalkjsUser = localStorage.getItem('currentTalkjsUser')\n\n    if (currentTalkjsUser) {\n      setCurrentUser(JSON.parse(currentTalkjsUser))\n    }\n  }, [])\n\n  const handleClick = (userId) => {\n\n    /* Retrieve the two users that will participate in the conversation */\n    const user = dummyUsers.find(user => user.id === userId)\n\n    /* Session initialization code */\n    Talk.ready\n    .then(() => {\n        /* Create the two users that will participate in the conversation */\n        const me = new Talk.User(currentUser);\n        const other = new Talk.User(user)\n\n        /* Create a talk session if this does not exist. Remember to replace tthe APP ID with the one on your dashboard */\n        if (!window.talkSession) {\n            window.talkSession = new Talk.Session({\n                appId: process.env.REACT_APP_APP_ID,\n                me: me\n            });\n        } \n        \n        /* Get a conversation ID or create one */\n        const conversationId = Talk.oneOnOneId(me, other);\n        const conversation = window.talkSession.getOrCreateConversation(conversationId);\n        \n        /* Set participants of the conversations */\n        conversation.setParticipant(me);\n        conversation.setParticipant(other);\n\n        /* Create and mount chatbox in container */\n        const chatbox = window.talkSession.createChatbox(conversation);\n        chatbox.mount(chatboxContainerRef.current);\n    })            \n    .catch(e => console.error(e));\n}\n\n  return (\n    <>\n      <Header />\n      <div className=\"users\">\n        <div className=\"current-user-container\">\n          {currentUser &&\n            <div>\n              <picture className=\"current-user-picture\">\n                <img alt={currentUser.name} src={currentUser.photoUrl}/>\n              </picture>\n              <div className=\"current-user-info\">\n                <h3>{currentUser.name}</h3>\n                <p>{currentUser.description}</p>\n              </div>\n            </div>\n          }\n        </div>\n        <div className=\"users-container\">\n          <ul>\n            {dummyUsers.map(user =>\n              <li key={user.id} className=\"user\">\n                <picture className=\"user-picture\">\n                  <img src={user.photoUrl} alt={`${user.name}`} />\n                </picture>\n                <div className=\"user-info-container\">\n                  <div className=\"user-info\">\n                    <h4>{user.name}</h4>\n                    <p>{user.info}</p>\n                  </div>\n                  <div className=\"user-action\">\n                    <button onClick={userId => handleClick(user.id)}>Message</button>\n                  </div>\n                </div>\n              </li>\n            )}\n          </ul>\n        </div>\n      </div>\n      <div className=\"chatbox-container\" ref={chatboxContainerRef}>\n        <div id=\"talkjs-container\" style={{height: \"300px\"}}>\n          <i></i>\n        </div>\n      </div>\n    </>\n  )\n}\nexport default MyNetwork;","import React, { useState, useEffect, createRef } from 'react'\nimport Talk from \"talkjs\"\nimport Header from '../../components/Header'\nimport './style.scss'\n\nconst Messaging = () => {\n  const [currentUser, setCurrentUser] = useState({})\n  const inboxRef = createRef()\n\n  useEffect(() => {\n    const currentTalkjsUser = localStorage.getItem('currentTalkjsUser');\n      if (currentTalkjsUser) {\n        setCurrentUser(JSON.parse(currentTalkjsUser))\n      }\n  }, [])\n\n    Talk.ready\n      .then(() => {\n          const me = new Talk.User(currentUser);\n          \n          if (!window.talkSession) {\n              window.talkSession = new Talk.Session({\n                  appId: process.env.REACT_APP_APP_ID,\n                  me: me\n              });\n          }\n      \n          const inbox = window.talkSession.createInbox();\n          inbox.mount(inboxRef.current);\n\n      })\n      .catch(e => console.error(e));\n\n  return (\n    <>\n      <Header />\n      <div style={{ height: '500px' }} className=\"inbox-container\" ref={inboxRef}>\n        Loading...\n      </div>\n    </>\n  )\n}\n\nexport default Messaging\n","import React, { useEffect } from 'react'\nimport { BrowserRouter as Router, Link, Route, Switch } from 'react-router-dom'\n\nimport HomePage from './containers/HomePage'\nimport LoginPage from './containers/LoginPage'\nimport MyNetworkPage from './containers/MyNetworkPage'\nimport MessagingPage from './containers/MessagingPage'\n\nimport './App.css';\n\nconst App = () => {\n  return (\n    <div className=\"App\">\n      <Router basename={process.env.PUBLIC_URL}>\n        <Switch>\n          <Route exact path=\"/\" component={LoginPage} />\n          <Route exact path=\"/my-network\" component={MyNetworkPage} />\n          <Route exact path=\"/home\" component={HomePage} />\n          <Route exact path=\"/messaging\" component={MessagingPage} />\n        </Switch>\n      </Router>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}